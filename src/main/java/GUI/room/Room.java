/*
 * Click nbfs://SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package GUI.room;

import util.DatabaseConnection;
import javax.swing.*;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.DefaultTableCellRenderer;
import java.awt.*;
import java.awt.event.KeyAdapter;
import java.awt.event.KeyEvent;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.sql.*;
import java.util.HashMap;
import java.util.Map;
import java.util.Vector;
import java.util.stream.Collectors;

/**
 *
 * @author Acer
 */
public class Room extends javax.swing.JPanel {
    private static final Color PRIMARY_COLOR = new Color(41, 98, 255);
    private static final Color AVAILABLE_COLOR = new Color(232, 245, 233);
    private static final Color RESERVED_COLOR = new Color(255, 243, 224);
    private static final Color OCCUPIED_COLOR = new Color(255, 235, 238);
    private static final Color BACKGROUND_COLOR = new Color(245, 245, 245);
    private static final Color PANEL_BG = Color.WHITE;
    private static final Color BORDER_COLOR = new Color(224, 224, 224);
    private static final Color TEXT_COLOR = new Color(33, 33, 33);

    private JPanel mainPanel;
    private JScrollPane scrollPane;
    private boolean isGridView = true; // Mặc định là dạng lưới
    private JButton toggleButton;
    private JTextField searchField;
    private Vector<Vector<Object>> roomData = new Vector<>(); // Lưu toàn bộ dữ liệu phòng
    private Vector<Vector<Object>> filteredRoomData = new Vector<>(); // Dữ liệu sau khi lọc
    private Map<Integer, String> roomTypes = new HashMap<>(); // Lưu room_type_id -> name

    /**
     * Creates new form Room
     */
    public Room() {
        initComponents();
        loadRoomTypes();
        loadData();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        setLayout(new BorderLayout());
        setBackground(BACKGROUND_COLOR);

        JPanel controlPanel = new JPanel(new FlowLayout(FlowLayout.LEFT, 15, 10));
        controlPanel.setBackground(PANEL_BG);
        controlPanel.setBorder(BorderFactory.createCompoundBorder(
                BorderFactory.createMatteBorder(0, 0, 1, 0, BORDER_COLOR),
                BorderFactory.createEmptyBorder(10, 10, 10, 10)
        ));

        JButton addButton = new JButton("Thêm phòng");
        addButton.setPreferredSize(new Dimension(140, 35));
        addButton.setIcon(new ImageIcon(getClass().getResource("/images/add-button.png")));
        addButton.setBackground(PRIMARY_COLOR);
        addButton.setForeground(Color.WHITE);
        addButton.setFocusPainted(false);
        addButton.setBorderPainted(false);
        addButton.setFont(new Font("Arial", Font.BOLD, 13));
        addButton.setCursor(new Cursor(Cursor.HAND_CURSOR));
        addButton.addActionListener(e -> showAddRoomDialog());
        controlPanel.add(addButton);

        controlPanel.add(Box.createHorizontalStrut(20));

        searchField = new JTextField(15);
        searchField.setPreferredSize(new Dimension(200, 35));
        searchField.setFont(new Font("Arial", Font.PLAIN, 13));
        searchField.setBorder(BorderFactory.createCompoundBorder(
                BorderFactory.createLineBorder(BORDER_COLOR, 1),
                BorderFactory.createEmptyBorder(5, 10, 5, 10)
        ));
        searchField.addKeyListener(new KeyAdapter() {
            @Override
            public void keyPressed(KeyEvent e) {
                if (e.getKeyCode() == KeyEvent.VK_ENTER) {
                    performSearch();
                }
            }
        });
        controlPanel.add(searchField);

        JButton searchButton = createIconButton("/images/search.png");
        searchButton.addActionListener(e -> performSearch());
        controlPanel.add(searchButton);

        JButton filterButton = createIconButton("/images/filter.png");
        filterButton.addActionListener(e -> showFilterDialog());
        controlPanel.add(filterButton);

        toggleButton = createIconButton("/images/grid.png");
        toggleButton.addActionListener(e -> {
            isGridView = !isGridView;
            if (isGridView) {
                toggleButton.setIcon(new ImageIcon(getClass().getResource("/images/grid.png")));
            } else {
                toggleButton.setIcon(new ImageIcon(getClass().getResource("/images/cells.png")));
            }
            updateView();
        });
        controlPanel.add(toggleButton);

        add(controlPanel, BorderLayout.NORTH);

        // Khởi tạo scrollPane
        scrollPane = new JScrollPane();
        scrollPane.setBorder(null);
        scrollPane.getViewport().setBackground(BACKGROUND_COLOR);
        add(scrollPane, BorderLayout.CENTER);
    }// </editor-fold>//GEN-END:initComponents

    private JButton createIconButton(String iconPath) {
        JButton button = new JButton();
        button.setPreferredSize(new Dimension(35, 35));
        button.setIcon(new ImageIcon(getClass().getResource(iconPath)));
        button.setBackground(PANEL_BG);
        button.setBorder(BorderFactory.createLineBorder(BORDER_COLOR, 1));
        button.setFocusPainted(false);
        button.setCursor(new Cursor(Cursor.HAND_CURSOR));
        return button;
    }

    private void loadRoomTypes() {
        try {
            Connection conn = DatabaseConnection.getConnection();
            Statement st = conn.createStatement();
            ResultSet rs = st.executeQuery("SELECT room_type_id, name FROM RoomType");
            while (rs.next()) {
                roomTypes.put(rs.getInt("room_type_id"), rs.getString("name"));
            }
            rs.close();
            st.close();
            conn.close();
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    private void loadData() {
        try {
            Connection conn = DatabaseConnection.getConnection();
            Statement st = conn.createStatement();
            ResultSet rs = st.executeQuery("SELECT room_id, room_no, floor_no, status, room_type_id, note FROM Room ORDER BY floor_no, room_no");

            roomData.clear();
            while (rs.next()) {
                Vector<Object> row = new Vector<>();
                row.add(rs.getInt("room_id"));
                row.add(rs.getString("room_no"));
                row.add(rs.getInt("floor_no"));
                row.add(rs.getString("status"));
                row.add(rs.getInt("room_type_id"));
                row.add(rs.getString("note"));
                roomData.add(row);
            }

            rs.close();
            st.close();
            conn.close();

            filteredRoomData = new Vector<>(roomData);
            updateView();

        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    private void performSearch() {
        String query = searchField.getText().trim().toLowerCase();
        if (query.isEmpty()) {
            filteredRoomData = new Vector<>(roomData);
        } else {
            filteredRoomData = roomData.stream()
                    .filter(row -> {
                        String roomNo = ((String) row.get(1)).toLowerCase();
                        String floorNo = String.valueOf(row.get(2));
                        String status = ((String) row.get(3)).toLowerCase();
                        String roomType = roomTypes.getOrDefault((Integer) row.get(4), "").toLowerCase();
                        String note = row.get(5) != null ? ((String) row.get(5)).toLowerCase() : "";
                        return roomNo.contains(query) || floorNo.contains(query) || status.contains(query) || roomType.contains(query) || note.contains(query);
                    })
                    .collect(Collectors.toCollection(Vector::new));
        }
        updateView();
    }

    private void showFilterDialog() {
        JDialog filterDialog = new JDialog((Frame) SwingUtilities.getWindowAncestor(this), "Lọc phòng", true);
        filterDialog.setLayout(new BorderLayout());
        filterDialog.setSize(350, 200);

        JPanel contentPanel = new JPanel(new GridLayout(2, 2, 15, 15));
        contentPanel.setBackground(PANEL_BG);
        contentPanel.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));

        JLabel roomTypeLabel = new JLabel("Loại phòng:");
        roomTypeLabel.setFont(new Font("Arial", Font.BOLD, 13));
        JComboBox<String> roomTypeCombo = new JComboBox<>();
        roomTypeCombo.addItem("Tất cả");
        for (String typeName : roomTypes.values()) {
            roomTypeCombo.addItem(typeName);
        }
        roomTypeCombo.setPreferredSize(new Dimension(150, 30));
        contentPanel.add(roomTypeLabel);
        contentPanel.add(roomTypeCombo);

        JLabel statusLabel = new JLabel("Trạng thái:");
        statusLabel.setFont(new Font("Arial", Font.BOLD, 13));
        JComboBox<String> statusCombo = new JComboBox<>(new String[]{"Tất cả", "AVAILABLE", "RESERVED", "OCCUPIED"});
        statusCombo.setPreferredSize(new Dimension(150, 30));
        contentPanel.add(statusLabel);
        contentPanel.add(statusCombo);

        JPanel buttonPanel = new JPanel(new FlowLayout(FlowLayout.RIGHT, 10, 10));
        buttonPanel.setBackground(PANEL_BG);
        JButton confirmButton = new JButton("Xác nhận");
        confirmButton.setPreferredSize(new Dimension(100, 35));
        confirmButton.setBackground(PRIMARY_COLOR);
        confirmButton.setForeground(Color.WHITE);
        confirmButton.setFocusPainted(false);
        confirmButton.setBorderPainted(false);
        confirmButton.setFont(new Font("Arial", Font.BOLD, 13));
        confirmButton.setCursor(new Cursor(Cursor.HAND_CURSOR));
        confirmButton.addActionListener(e -> {
            String selectedRoomType = (String) roomTypeCombo.getSelectedItem();
            String selectedStatus = (String) statusCombo.getSelectedItem();
            filterRooms(selectedRoomType, selectedStatus);
            filterDialog.dispose();
        });
        buttonPanel.add(confirmButton);

        filterDialog.add(contentPanel, BorderLayout.CENTER);
        filterDialog.add(buttonPanel, BorderLayout.SOUTH);
        filterDialog.setLocationRelativeTo(this);
        filterDialog.setVisible(true);
    }

    private void filterRooms(String roomType, String status) {
        filteredRoomData = roomData.stream()
                .filter(row -> {
                    boolean matchRoomType = roomType.equals("Tất cả") || roomTypes.get((Integer) row.get(4)).equals(roomType);
                    boolean matchStatus = status.equals("Tất cả") || ((String) row.get(3)).equals(status);
                    return matchRoomType && matchStatus;
                })
                .collect(Collectors.toCollection(Vector::new));
        updateView();
    }

    private void showAddRoomDialog() {
        JDialog addDialog = new JDialog((Frame) SwingUtilities.getWindowAncestor(this), "Thêm phòng", true);
        addDialog.setLayout(new BorderLayout());
        addDialog.setSize(400, 350);

        JPanel contentPanel = new JPanel(new GridLayout(5, 2, 15, 15));
        contentPanel.setBackground(PANEL_BG);
        contentPanel.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));

        JLabel roomNoLabel = new JLabel("Số phòng:");
        roomNoLabel.setFont(new Font("Arial", Font.BOLD, 13));
        JTextField roomNoField = new JTextField();
        roomNoField.setPreferredSize(new Dimension(150, 30));

        JLabel floorNoLabel = new JLabel("Tầng:");
        floorNoLabel.setFont(new Font("Arial", Font.BOLD, 13));
        JTextField floorNoField = new JTextField();
        floorNoField.setPreferredSize(new Dimension(150, 30));

        JLabel statusLabel = new JLabel("Trạng thái:");
        statusLabel.setFont(new Font("Arial", Font.BOLD, 13));
        JComboBox<String> statusCombo = new JComboBox<>(new String[]{"AVAILABLE", "RESERVED", "OCCUPIED"});
        statusCombo.setPreferredSize(new Dimension(150, 30));

        JLabel roomTypeLabel = new JLabel("Loại phòng:");
        roomTypeLabel.setFont(new Font("Arial", Font.BOLD, 13));
        JComboBox<String> roomTypeCombo = new JComboBox<>();
        for (String typeName : roomTypes.values()) {
            roomTypeCombo.addItem(typeName);
        }
        roomTypeCombo.setPreferredSize(new Dimension(150, 30));

        JLabel noteLabel = new JLabel("Ghi chú:");
        noteLabel.setFont(new Font("Arial", Font.BOLD, 13));
        JTextField noteField = new JTextField();
        noteField.setPreferredSize(new Dimension(150, 30));

        contentPanel.add(roomNoLabel);
        contentPanel.add(roomNoField);
        contentPanel.add(floorNoLabel);
        contentPanel.add(floorNoField);
        contentPanel.add(statusLabel);
        contentPanel.add(statusCombo);
        contentPanel.add(roomTypeLabel);
        contentPanel.add(roomTypeCombo);
        contentPanel.add(noteLabel);
        contentPanel.add(noteField);

        JPanel buttonPanel = new JPanel(new FlowLayout(FlowLayout.RIGHT, 10, 10));
        buttonPanel.setBackground(PANEL_BG);
        JButton confirmButton = new JButton("Xác nhận");
        confirmButton.setPreferredSize(new Dimension(100, 35));
        confirmButton.setBackground(PRIMARY_COLOR);
        confirmButton.setForeground(Color.WHITE);
        confirmButton.setFocusPainted(false);
        confirmButton.setBorderPainted(false);
        confirmButton.setFont(new Font("Arial", Font.BOLD, 13));
        confirmButton.setCursor(new Cursor(Cursor.HAND_CURSOR));
        confirmButton.addActionListener(e -> {
            try {
                String roomNo = roomNoField.getText().trim();
                String floorNoText = floorNoField.getText().trim();
                String status = (String) statusCombo.getSelectedItem();
                String roomType = (String) roomTypeCombo.getSelectedItem();
                String note = noteField.getText().trim();

                if (roomNo.isEmpty() || floorNoText.isEmpty()) {
                    JOptionPane.showMessageDialog(addDialog, "Vui lòng điền đầy đủ số phòng và tầng!");
                    return;
                }

                int floorNo;
                try {
                    floorNo = Integer.parseInt(floorNoText);
                } catch (NumberFormatException ex) {
                    JOptionPane.showMessageDialog(addDialog, "Tầng phải là số nguyên!");
                    return;
                }

                int roomTypeId = roomTypes.entrySet().stream()
                        .filter(entry -> entry.getValue().equals(roomType))
                        .map(Map.Entry::getKey)
                        .findFirst()
                        .orElse(-1);

                Connection conn = DatabaseConnection.getConnection();
                PreparedStatement ps = conn.prepareStatement(
                        "INSERT INTO Room (room_no, floor_no, status, room_type_id, note) VALUES (?, ?, ?, ?, ?)");
                ps.setString(1, roomNo);
                ps.setInt(2, floorNo);
                ps.setString(3, status);
                ps.setInt(4, roomTypeId);
                ps.setString(5, note.isEmpty() ? null : note);
                ps.executeUpdate();

                ps.close();
                conn.close();

                JOptionPane.showMessageDialog(addDialog, "Thêm phòng thành công!");
                loadData();
                addDialog.dispose();
            } catch (Exception ex) {
                ex.printStackTrace();
                JOptionPane.showMessageDialog(addDialog, "Lỗi khi thêm phòng: " + ex.getMessage());
            }
        });
        buttonPanel.add(confirmButton);

        addDialog.add(contentPanel, BorderLayout.CENTER);
        addDialog.add(buttonPanel, BorderLayout.SOUTH);
        addDialog.setLocationRelativeTo(this);
        addDialog.setVisible(true);
    }

    private void showEditRoomDialog(int roomId, String roomNo, int floorNo, String status, int roomTypeId, String note) {
        JDialog editDialog = new JDialog((Frame) SwingUtilities.getWindowAncestor(this), "Sửa phòng", true);
        editDialog.setLayout(new BorderLayout());
        editDialog.setSize(400, 350);

        JPanel contentPanel = new JPanel(new GridLayout(5, 2, 15, 15));
        contentPanel.setBackground(PANEL_BG);
        contentPanel.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));

        JLabel roomNoLabel = new JLabel("Số phòng:");
        roomNoLabel.setFont(new Font("Arial", Font.BOLD, 13));
        JTextField roomNoField = new JTextField(roomNo);
        roomNoField.setPreferredSize(new Dimension(150, 30));

        JLabel floorNoLabel = new JLabel("Tầng:");
        floorNoLabel.setFont(new Font("Arial", Font.BOLD, 13));
        JTextField floorNoField = new JTextField(String.valueOf(floorNo));
        floorNoField.setPreferredSize(new Dimension(150, 30));

        JLabel statusLabel = new JLabel("Trạng thái:");
        statusLabel.setFont(new Font("Arial", Font.BOLD, 13));
        JComboBox<String> statusCombo = new JComboBox<>(new String[]{"AVAILABLE", "RESERVED", "OCCUPIED"});
        statusCombo.setSelectedItem(status);
        statusCombo.setPreferredSize(new Dimension(150, 30));

        JLabel roomTypeLabel = new JLabel("Loại phòng:");
        roomTypeLabel.setFont(new Font("Arial", Font.BOLD, 13));
        JComboBox<String> roomTypeCombo = new JComboBox<>();
        for (String typeName : roomTypes.values()) {
            roomTypeCombo.addItem(typeName);
        }
        roomTypeCombo.setSelectedItem(roomTypes.get(roomTypeId));
        roomTypeCombo.setPreferredSize(new Dimension(150, 30));

        JLabel noteLabel = new JLabel("Ghi chú:");
        noteLabel.setFont(new Font("Arial", Font.BOLD, 13));
        JTextField noteField = new JTextField(note != null ? note : "");
        noteField.setPreferredSize(new Dimension(150, 30));

        contentPanel.add(roomNoLabel);
        contentPanel.add(roomNoField);
        contentPanel.add(floorNoLabel);
        contentPanel.add(floorNoField);
        contentPanel.add(statusLabel);
        contentPanel.add(statusCombo);
        contentPanel.add(roomTypeLabel);
        contentPanel.add(roomTypeCombo);
        contentPanel.add(noteLabel);
        contentPanel.add(noteField);

        JPanel buttonPanel = new JPanel(new FlowLayout(FlowLayout.RIGHT, 10, 10));
        buttonPanel.setBackground(PANEL_BG);
        JButton confirmButton = new JButton("Xác nhận");
        confirmButton.setPreferredSize(new Dimension(100, 35));
        confirmButton.setBackground(PRIMARY_COLOR);
        confirmButton.setForeground(Color.WHITE);
        confirmButton.setFocusPainted(false);
        confirmButton.setBorderPainted(false);
        confirmButton.setFont(new Font("Arial", Font.BOLD, 13));
        confirmButton.setCursor(new Cursor(Cursor.HAND_CURSOR));
        confirmButton.addActionListener(e -> {
            try {
                String newRoomNo = roomNoField.getText().trim();
                String floorNoText = floorNoField.getText().trim();
                String newStatus = (String) statusCombo.getSelectedItem();
                String newRoomType = (String) roomTypeCombo.getSelectedItem();
                String newNote = noteField.getText().trim();

                if (newRoomNo.isEmpty() || floorNoText.isEmpty()) {
                    JOptionPane.showMessageDialog(editDialog, "Vui lòng điền đầy đủ số phòng và tầng!");
                    return;
                }

                int newFloorNo;
                try {
                    newFloorNo = Integer.parseInt(floorNoText);
                } catch (NumberFormatException ex) {
                    JOptionPane.showMessageDialog(editDialog, "Tầng phải là số nguyên!");
                    return;
                }

                int newRoomTypeId = roomTypes.entrySet().stream()
                        .filter(entry -> entry.getValue().equals(newRoomType))
                        .map(Map.Entry::getKey)
                        .findFirst()
                        .orElse(-1);

                Connection conn = DatabaseConnection.getConnection();
                PreparedStatement ps = conn.prepareStatement(
                        "UPDATE Room SET room_no = ?, floor_no = ?, status = ?, room_type_id = ?, note = ? WHERE room_id = ?");
                ps.setString(1, newRoomNo);
                ps.setInt(2, newFloorNo);
                ps.setString(3, newStatus);
                ps.setInt(4, newRoomTypeId);
                ps.setString(5, newNote.isEmpty() ? null : newNote);
                ps.setInt(6, roomId);
                ps.executeUpdate();

                ps.close();
                conn.close();

                JOptionPane.showMessageDialog(editDialog, "Sửa phòng thành công!");
                loadData();
                editDialog.dispose();
            } catch (Exception ex) {
                ex.printStackTrace();
                JOptionPane.showMessageDialog(editDialog, "Lỗi khi sửa phòng: " + ex.getMessage());
            }
        });
        buttonPanel.add(confirmButton);

        editDialog.add(contentPanel, BorderLayout.CENTER);
        editDialog.add(buttonPanel, BorderLayout.SOUTH);
        editDialog.setLocationRelativeTo(this);
        editDialog.setVisible(true);
    }

    private void deleteRoom(int roomId, String status) {
        if (status.equals("RESERVED") || status.equals("OCCUPIED")) {
            JOptionPane.showMessageDialog(this, "Không thể xóa phòng có trạng thái RESERVED hoặc OCCUPIED!");
            return;
        }

        int confirm = JOptionPane.showConfirmDialog(this, "Bạn có chắc muốn xóa phòng ID: " + roomId + "?", "Xác nhận xóa", JOptionPane.YES_NO_OPTION);
        if (confirm == JOptionPane.YES_OPTION) {
            try {
                Connection conn = DatabaseConnection.getConnection();
                PreparedStatement ps = conn.prepareStatement("DELETE FROM Room WHERE room_id = ?");
                ps.setInt(1, roomId);
                ps.executeUpdate();

                ps.close();
                conn.close();

                JOptionPane.showMessageDialog(this, "Xóa phòng thành công!");
                loadData(); // Tải lại dữ liệu
            } catch (Exception ex) {
                ex.printStackTrace();
                JOptionPane.showMessageDialog(this, "Lỗi khi xóa phòng: " + ex.getMessage());
            }
        }
    }

    private void updateView() {
        if (isGridView) {
            showGridView();
        } else {
            showTableView();
        }
    }

    private void showGridView() {
        mainPanel = new JPanel();
        mainPanel.setLayout(new BoxLayout(mainPanel, BoxLayout.Y_AXIS));
        mainPanel.setBackground(BACKGROUND_COLOR);

        int currentFloor = -1;
        JPanel rowPanel = null;

        for (Vector<Object> row : filteredRoomData) {
            int roomId = (int) row.get(0);
            String roomName = (String) row.get(1);
            int floorNo = (int) row.get(2);
            String status = (String) row.get(3);

            if (floorNo != currentFloor) {
                currentFloor = floorNo;
                JPanel floorPanel = new JPanel(new FlowLayout(FlowLayout.CENTER));
                floorPanel.setBackground(BACKGROUND_COLOR);

                JLabel floorLabel = new JLabel("Tầng " + floorNo, SwingConstants.CENTER);
                floorLabel.setFont(new Font("Arial", Font.BOLD, 18));
                floorLabel.setForeground(TEXT_COLOR);
                floorLabel.setOpaque(true);
                floorLabel.setBackground(PANEL_BG);
                floorLabel.setBorder(BorderFactory.createCompoundBorder(
                        BorderFactory.createLineBorder(BORDER_COLOR, 1),
                        BorderFactory.createEmptyBorder(10, 30, 10, 30)
                ));
                floorPanel.add(floorLabel);
                mainPanel.add(floorPanel);

                rowPanel = new JPanel();
                rowPanel.setLayout(new FlowLayout(FlowLayout.CENTER, 20, 15));
                rowPanel.setBackground(BACKGROUND_COLOR);
                mainPanel.add(rowPanel);
            }

            JButton btn = new JButton();
            btn.setLayout(new BorderLayout(0, 5));

            ImageIcon icon = new ImageIcon(getClass().getResource("/images/house.png"));
            JLabel iconLabel = new JLabel(icon, SwingConstants.CENTER);
            btn.add(iconLabel, BorderLayout.CENTER);

            JLabel nameLabel = new JLabel("Phòng " + roomName, SwingConstants.CENTER);
            nameLabel.setFont(new Font("Arial", Font.BOLD, 13));
            nameLabel.setForeground(TEXT_COLOR);
            btn.add(nameLabel, BorderLayout.SOUTH);

            btn.setPreferredSize(new Dimension(130, 130));

            switch (status) {
                case "AVAILABLE":
                    btn.setBackground(AVAILABLE_COLOR);
                    break;
                case "RESERVED":
                    btn.setBackground(RESERVED_COLOR);
                    break;
                case "OCCUPIED":
                    btn.setBackground(OCCUPIED_COLOR);
                    break;
            }
            btn.setOpaque(true);
            btn.setBorder(BorderFactory.createCompoundBorder(
                    BorderFactory.createLineBorder(BORDER_COLOR, 2),
                    BorderFactory.createEmptyBorder(10, 10, 10, 10)
            ));
            btn.setFocusPainted(false);
            btn.setCursor(new Cursor(Cursor.HAND_CURSOR));

            btn.addActionListener(e -> {
                String roomType = roomTypes.getOrDefault((Integer) row.get(4), "Unknown");
                JOptionPane.showMessageDialog(this,
                        "Bạn chọn phòng: " + roomName + " (ID: " + roomId + ", Tầng: " + floorNo + ", Trạng thái: " + status + ", Loại phòng: " + roomType + ")");
            });

            rowPanel.add(btn);

            if (rowPanel.getComponentCount() == 4) {
                rowPanel = new JPanel();
                rowPanel.setLayout(new FlowLayout(FlowLayout.CENTER, 20, 15));
                rowPanel.setBackground(BACKGROUND_COLOR);
                mainPanel.add(rowPanel);
            }
        }

        scrollPane.setViewportView(mainPanel);
    }

    private void showTableView() {
        String[] columnNames = {"ID", "Số phòng", "Tầng", "Trạng thái", "Loại phòng", "Ghi chú"};
        DefaultTableModel model = new DefaultTableModel(columnNames, 0);

        for (Vector<Object> row : filteredRoomData) {
            Vector<Object> displayRow = new Vector<>(row);
            displayRow.set(4, roomTypes.getOrDefault((Integer) row.get(4), "Unknown"));
            model.addRow(displayRow);
        }

        JTable table = new JTable(model);
        table.setRowHeight(40);
        table.setFont(new Font("Arial", Font.PLAIN, 13));
        table.setGridColor(BORDER_COLOR);
        table.setSelectionBackground(new Color(232, 240, 254));
        table.setSelectionForeground(TEXT_COLOR);
        table.setShowVerticalLines(true);
        table.setIntercellSpacing(new Dimension(1, 1));

        table.getTableHeader().setFont(new Font("Arial", Font.BOLD, 14));
        table.getTableHeader().setBackground(PANEL_BG);
        table.getTableHeader().setForeground(TEXT_COLOR);
        table.getTableHeader().setBorder(BorderFactory.createMatteBorder(0, 0, 2, 0, PRIMARY_COLOR));
        table.getTableHeader().setPreferredSize(new Dimension(0, 45));

        table.setDefaultRenderer(Object.class, new DefaultTableCellRenderer() {
            @Override
            public Component getTableCellRendererComponent(JTable table, Object value, boolean isSelected, boolean hasFocus, int row, int column) {
                Component c = super.getTableCellRendererComponent(table, value, isSelected, hasFocus, row, column);
                if (!isSelected) {
                    c.setBackground(row % 2 == 0 ? Color.WHITE : new Color(250, 250, 250));
                }
                setBorder(BorderFactory.createEmptyBorder(5, 10, 5, 10));
                return c;
            }
        });

        JPopupMenu popupMenu = new JPopupMenu();
        JMenuItem editItem = new JMenuItem("Sửa");
        JMenuItem deleteItem = new JMenuItem("Xóa");
        popupMenu.add(editItem);
        popupMenu.add(deleteItem);

        table.addMouseListener(new MouseAdapter() {
            @Override
            public void mouseReleased(MouseEvent e) {
                if (e.isPopupTrigger() && table.getSelectedRow() != -1) {
                    int rowIndex = table.getSelectedRow();
                    int modelRow = table.convertRowIndexToModel(rowIndex);
                    Vector<Object> row = filteredRoomData.get(modelRow);
                    int roomId = (int) row.get(0);
                    String roomNo = (String) row.get(1);
                    int floorNo = (int) row.get(2);
                    String status = (String) row.get(3);
                    int roomTypeId = (int) row.get(4);
                    String note = row.get(5) != null ? (String) row.get(5) : "";

                    editItem.addActionListener(e1 -> showEditRoomDialog(roomId, roomNo, floorNo, status, roomTypeId, note));
                    deleteItem.addActionListener(e1 -> deleteRoom(roomId, status));

                    popupMenu.show(e.getComponent(), e.getX(), e.getY());
                }
            }
        });

        scrollPane.setViewportView(table);
    }

    // Variables declaration - do not modify//GEN-END:variables
    // End of variables declaration//GEN-END:variables
}
